package chat;

import java.awt.Toolkit;
import javax.swing.JOptionPane;

/**
 *
 * @author Liza Girsova
 */
public class ClientFrame extends javax.swing.JFrame implements Runnable {

    String handle;
    String server;
    Thread thread1;

    /**
     * Creates new form ClientFrame
     */
    public ClientFrame() {
        initComponents();
        connectDialog.pack();
        connectDialog.setVisible(true);
        outputMessageArea.setEditable(false);
        thread1 = new Thread(this, "Thread1");
        thread1.start();
    }
    
    @Override
    public void run() {
        outputText();
    }

    public void outputText() {
        int count = 0;
        while (true) {
            String newestComment = null;         
            if (chat.getCommentCount() > count) {                ;
                newestComment = chat.getComment(count);
                outputMessageArea.append(newestComment);
                count++;
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    // Fail silently
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        connectDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        connectDialogServerTF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        connectDialogHandleTF = new javax.swing.JTextField();
        connectDialogConnectButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputMessageArea = new javax.swing.JTextArea();
        textField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();

        connectDialog.setTitle("Connect to ChatterBox");
        connectDialog.setModal(true);
        connectDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                connectDialogWindowClosing(evt);
            }
        });

        jLabel1.setText("Choose Server:");

        jLabel2.setText("Choose Handle:");

        connectDialogConnectButton.setText("Connect");
        connectDialogConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectDialogConnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout connectDialogLayout = new javax.swing.GroupLayout(connectDialog.getContentPane());
        connectDialog.getContentPane().setLayout(connectDialogLayout);
        connectDialogLayout.setHorizontalGroup(
            connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(connectDialogLayout.createSequentialGroup()
                        .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(connectDialogServerTF)
                            .addComponent(connectDialogHandleTF, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, connectDialogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(connectDialogConnectButton)))
                .addContainerGap())
        );
        connectDialogLayout.setVerticalGroup(
            connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(connectDialogServerTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(connectDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(connectDialogHandleTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectDialogConnectButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ChatterBox");

        outputMessageArea.setColumns(20);
        outputMessageArea.setRows(5);
        jScrollPane1.setViewportView(outputMessageArea);

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 432, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButton))
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        String comment = textField.getText();
        textField.setText("");
        handle = connectDialogHandleTF.getText();
        String commentWithHandle = (handle + ": " + comment);
        chat.sendComment(commentWithHandle);  
    }//GEN-LAST:event_sendButtonActionPerformed

    private void connectDialogConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectDialogConnectButtonActionPerformed

        if (connectDialogServerTF.getText().trim().length() == 0 || connectDialogHandleTF.getText().trim().length() == 0) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Error: Server and Handle Required.");
        } else {
            connectDialog.setVisible(false);
            handle = connectDialogHandleTF.getText();
            server = connectDialogServerTF.getText();
            chat.startChat(handle, server);
        }
    }//GEN-LAST:event_connectDialogConnectButtonActionPerformed

    private void connectDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_connectDialogWindowClosing
        System.exit(0);         // TODO add your handling code here:
    }//GEN-LAST:event_connectDialogWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }
    private ChatGateway chat = new ChatGateway();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog connectDialog;
    private javax.swing.JButton connectDialogConnectButton;
    private javax.swing.JTextField connectDialogHandleTF;
    private javax.swing.JTextField connectDialogServerTF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea outputMessageArea;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField textField;
    // End of variables declaration//GEN-END:variables
}
